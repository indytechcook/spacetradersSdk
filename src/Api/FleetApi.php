<?php
/**
 * FleetApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FleetApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FleetApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createChart' => [
            'application/json',
        ],
        'createShipShipScan' => [
            'application/json',
        ],
        'createShipSystemScan' => [
            'application/json',
        ],
        'createShipWaypointScan' => [
            'application/json',
        ],
        'createSurvey' => [
            'application/json',
        ],
        'dockShip' => [
            'application/json',
        ],
        'extractResources' => [
            'application/json',
        ],
        'extractResourcesWithSurvey' => [
            'application/json',
        ],
        'getMounts' => [
            'application/json',
        ],
        'getMyShip' => [
            'application/json',
        ],
        'getMyShipCargo' => [
            'application/json',
        ],
        'getMyShips' => [
            'application/json',
        ],
        'getRepairShip' => [
            'application/json',
        ],
        'getScrapShip' => [
            'application/json',
        ],
        'getShipCooldown' => [
            'application/json',
        ],
        'getShipNav' => [
            'application/json',
        ],
        'installMount' => [
            'application/json',
        ],
        'jettison' => [
            'application/json',
        ],
        'jumpShip' => [
            'application/json',
        ],
        'navigateShip' => [
            'application/json',
        ],
        'negotiateContract' => [
            'application/json',
        ],
        'orbitShip' => [
            'application/json',
        ],
        'patchShipNav' => [
            'application/json',
        ],
        'purchaseCargo' => [
            'application/json',
        ],
        'purchaseShip' => [
            'application/json',
        ],
        'refuelShip' => [
            'application/json',
        ],
        'removeMount' => [
            'application/json',
        ],
        'repairShip' => [
            'application/json',
        ],
        'scrapShip' => [
            'application/json',
        ],
        'sellCargo' => [
            'application/json',
        ],
        'shipRefine' => [
            'application/json',
        ],
        'siphonResources' => [
            'application/json',
        ],
        'transferCargo' => [
            'application/json',
        ],
        'warpShip' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createChart
     *
     * Create Chart
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChart'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateChart201Response
     */
    public function createChart(
        string $shipSymbol,
        string $contentType = self::contentTypes['createChart'][0]
    ): \OpenAPI\Client\Model\CreateChart201Response
    {
        list($response) = $this->createChartWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation createChartWithHttpInfo
     *
     * Create Chart
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChart'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateChart201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChartWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['createChart'][0]
    ): array
    {
        $request = $this->createChartRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateChart201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateChart201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateChart201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateChart201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateChart201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createChartAsync
     *
     * Create Chart
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChart'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createChartAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['createChart'][0]
    ): PromiseInterface
    {
        return $this->createChartAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createChartAsyncWithHttpInfo
     *
     * Create Chart
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChart'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createChartAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['createChart'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\CreateChart201Response';
        $request = $this->createChartRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createChart'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChart'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createChartRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['createChart'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling createChart'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/chart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShipShipScan
     *
     * Scan Ships
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipShipScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateShipShipScan201Response
     */
    public function createShipShipScan(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipShipScan'][0]
    ): \OpenAPI\Client\Model\CreateShipShipScan201Response
    {
        list($response) = $this->createShipShipScanWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation createShipShipScanWithHttpInfo
     *
     * Scan Ships
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipShipScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateShipShipScan201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShipShipScanWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipShipScan'][0]
    ): array
    {
        $request = $this->createShipShipScanRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateShipShipScan201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateShipShipScan201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateShipShipScan201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateShipShipScan201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateShipShipScan201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShipShipScanAsync
     *
     * Scan Ships
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipShipScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipShipScanAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipShipScan'][0]
    ): PromiseInterface
    {
        return $this->createShipShipScanAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShipShipScanAsyncWithHttpInfo
     *
     * Scan Ships
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipShipScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipShipScanAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipShipScan'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\CreateShipShipScan201Response';
        $request = $this->createShipShipScanRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShipShipScan'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipShipScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShipShipScanRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipShipScan'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling createShipShipScan'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/scan/ships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShipSystemScan
     *
     * Scan Systems
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipSystemScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateShipSystemScan201Response
     */
    public function createShipSystemScan(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipSystemScan'][0]
    ): \OpenAPI\Client\Model\CreateShipSystemScan201Response
    {
        list($response) = $this->createShipSystemScanWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation createShipSystemScanWithHttpInfo
     *
     * Scan Systems
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipSystemScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateShipSystemScan201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShipSystemScanWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipSystemScan'][0]
    ): array
    {
        $request = $this->createShipSystemScanRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateShipSystemScan201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateShipSystemScan201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateShipSystemScan201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateShipSystemScan201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateShipSystemScan201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShipSystemScanAsync
     *
     * Scan Systems
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipSystemScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipSystemScanAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipSystemScan'][0]
    ): PromiseInterface
    {
        return $this->createShipSystemScanAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShipSystemScanAsyncWithHttpInfo
     *
     * Scan Systems
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipSystemScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipSystemScanAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipSystemScan'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\CreateShipSystemScan201Response';
        $request = $this->createShipSystemScanRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShipSystemScan'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipSystemScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShipSystemScanRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipSystemScan'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling createShipSystemScan'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/scan/systems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShipWaypointScan
     *
     * Scan Waypoints
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipWaypointScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateShipWaypointScan201Response
     */
    public function createShipWaypointScan(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipWaypointScan'][0]
    ): \OpenAPI\Client\Model\CreateShipWaypointScan201Response
    {
        list($response) = $this->createShipWaypointScanWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation createShipWaypointScanWithHttpInfo
     *
     * Scan Waypoints
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipWaypointScan'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateShipWaypointScan201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShipWaypointScanWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipWaypointScan'][0]
    ): array
    {
        $request = $this->createShipWaypointScanRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateShipWaypointScan201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateShipWaypointScan201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateShipWaypointScan201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateShipWaypointScan201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateShipWaypointScan201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShipWaypointScanAsync
     *
     * Scan Waypoints
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipWaypointScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipWaypointScanAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['createShipWaypointScan'][0]
    ): PromiseInterface
    {
        return $this->createShipWaypointScanAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShipWaypointScanAsyncWithHttpInfo
     *
     * Scan Waypoints
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipWaypointScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createShipWaypointScanAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipWaypointScan'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\CreateShipWaypointScan201Response';
        $request = $this->createShipWaypointScanRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShipWaypointScan'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShipWaypointScan'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShipWaypointScanRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['createShipWaypointScan'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling createShipWaypointScan'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/scan/waypoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSurvey
     *
     * Create Survey
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSurvey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateSurvey201Response
     */
    public function createSurvey(
        string $shipSymbol,
        string $contentType = self::contentTypes['createSurvey'][0]
    ): \OpenAPI\Client\Model\CreateSurvey201Response
    {
        list($response) = $this->createSurveyWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation createSurveyWithHttpInfo
     *
     * Create Survey
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSurvey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateSurvey201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSurveyWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['createSurvey'][0]
    ): array
    {
        $request = $this->createSurveyRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateSurvey201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateSurvey201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateSurvey201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CreateSurvey201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateSurvey201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSurveyAsync
     *
     * Create Survey
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSurveyAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['createSurvey'][0]
    ): PromiseInterface
    {
        return $this->createSurveyAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSurveyAsyncWithHttpInfo
     *
     * Create Survey
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createSurveyAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['createSurvey'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\CreateSurvey201Response';
        $request = $this->createSurveyRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSurvey'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSurveyRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['createSurvey'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling createSurvey'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/survey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dockShip
     *
     * Dock Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dockShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\DockShip200Response
     */
    public function dockShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['dockShip'][0]
    ): \OpenAPI\Client\Model\DockShip200Response
    {
        list($response) = $this->dockShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation dockShipWithHttpInfo
     *
     * Dock Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dockShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DockShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function dockShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['dockShip'][0]
    ): array
    {
        $request = $this->dockShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DockShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DockShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DockShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DockShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DockShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dockShipAsync
     *
     * Dock Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dockShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function dockShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['dockShip'][0]
    ): PromiseInterface
    {
        return $this->dockShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dockShipAsyncWithHttpInfo
     *
     * Dock Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dockShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function dockShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['dockShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\DockShip200Response';
        $request = $this->dockShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dockShip'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dockShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dockShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['dockShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling dockShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/dock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extractResources
     *
     * Extract Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\ExtractResourcesRequest|null $extractResourcesRequest extractResourcesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExtractResources201Response
     */
    public function extractResources(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ExtractResourcesRequest $extractResourcesRequest = null,
        string $contentType = self::contentTypes['extractResources'][0]
    ): \OpenAPI\Client\Model\ExtractResources201Response
    {
        list($response) = $this->extractResourcesWithHttpInfo($shipSymbol, $extractResourcesRequest, $contentType);
        return $response;
    }

    /**
     * Operation extractResourcesWithHttpInfo
     *
     * Extract Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\ExtractResourcesRequest|null $extractResourcesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExtractResources201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractResourcesWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ExtractResourcesRequest $extractResourcesRequest = null,
        string $contentType = self::contentTypes['extractResources'][0]
    ): array
    {
        $request = $this->extractResourcesRequest($shipSymbol, $extractResourcesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ExtractResources201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtractResources201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtractResources201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExtractResources201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtractResources201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractResourcesAsync
     *
     * Extract Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\ExtractResourcesRequest|null $extractResourcesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function extractResourcesAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ExtractResourcesRequest $extractResourcesRequest = null,
        string $contentType = self::contentTypes['extractResources'][0]
    ): PromiseInterface
    {
        return $this->extractResourcesAsyncWithHttpInfo($shipSymbol, $extractResourcesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractResourcesAsyncWithHttpInfo
     *
     * Extract Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\ExtractResourcesRequest|null $extractResourcesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function extractResourcesAsyncWithHttpInfo(
        $shipSymbol,
        $extractResourcesRequest = null,
        string $contentType = self::contentTypes['extractResources'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ExtractResources201Response';
        $request = $this->extractResourcesRequest($shipSymbol, $extractResourcesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractResources'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\ExtractResourcesRequest|null $extractResourcesRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractResourcesRequest(
        $shipSymbol,
        $extractResourcesRequest = null,
        string $contentType = self::contentTypes['extractResources'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling extractResources'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/extract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($extractResourcesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($extractResourcesRequest));
            } else {
                $httpBody = $extractResourcesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extractResourcesWithSurvey
     *
     * Extract Resources with Survey
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\Survey|null $survey survey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResourcesWithSurvey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExtractResources201Response
     */
    public function extractResourcesWithSurvey(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\Survey $survey = null,
        string $contentType = self::contentTypes['extractResourcesWithSurvey'][0]
    ): \OpenAPI\Client\Model\ExtractResources201Response
    {
        list($response) = $this->extractResourcesWithSurveyWithHttpInfo($shipSymbol, $survey, $contentType);
        return $response;
    }

    /**
     * Operation extractResourcesWithSurveyWithHttpInfo
     *
     * Extract Resources with Survey
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\Survey|null $survey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResourcesWithSurvey'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExtractResources201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractResourcesWithSurveyWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\Survey $survey = null,
        string $contentType = self::contentTypes['extractResourcesWithSurvey'][0]
    ): array
    {
        $request = $this->extractResourcesWithSurveyRequest($shipSymbol, $survey, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ExtractResources201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExtractResources201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExtractResources201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ExtractResources201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExtractResources201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractResourcesWithSurveyAsync
     *
     * Extract Resources with Survey
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\Survey|null $survey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResourcesWithSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function extractResourcesWithSurveyAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\Survey $survey = null,
        string $contentType = self::contentTypes['extractResourcesWithSurvey'][0]
    ): PromiseInterface
    {
        return $this->extractResourcesWithSurveyAsyncWithHttpInfo($shipSymbol, $survey, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractResourcesWithSurveyAsyncWithHttpInfo
     *
     * Extract Resources with Survey
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\Survey|null $survey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResourcesWithSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function extractResourcesWithSurveyAsyncWithHttpInfo(
        $shipSymbol,
        $survey = null,
        string $contentType = self::contentTypes['extractResourcesWithSurvey'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ExtractResources201Response';
        $request = $this->extractResourcesWithSurveyRequest($shipSymbol, $survey, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractResourcesWithSurvey'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\Survey|null $survey (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['extractResourcesWithSurvey'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractResourcesWithSurveyRequest(
        $shipSymbol,
        $survey = null,
        string $contentType = self::contentTypes['extractResourcesWithSurvey'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling extractResourcesWithSurvey'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/extract/survey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($survey)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($survey));
            } else {
                $httpBody = $survey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMounts
     *
     * Get Mounts
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMounts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetMounts200Response
     */
    public function getMounts(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMounts'][0]
    ): \OpenAPI\Client\Model\GetMounts200Response
    {
        list($response) = $this->getMountsWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getMountsWithHttpInfo
     *
     * Get Mounts
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMounts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetMounts200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMountsWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMounts'][0]
    ): array
    {
        $request = $this->getMountsRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetMounts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetMounts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetMounts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetMounts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetMounts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMountsAsync
     *
     * Get Mounts
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMounts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMountsAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMounts'][0]
    ): PromiseInterface
    {
        return $this->getMountsAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMountsAsyncWithHttpInfo
     *
     * Get Mounts
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMounts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMountsAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getMounts'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetMounts200Response';
        $request = $this->getMountsRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMounts'
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMounts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMountsRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getMounts'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getMounts'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/mounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyShip
     *
     * Get Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetMyShip200Response
     */
    public function getMyShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShip'][0]
    ): \OpenAPI\Client\Model\GetMyShip200Response
    {
        list($response) = $this->getMyShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getMyShipWithHttpInfo
     *
     * Get Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetMyShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShip'][0]
    ): array
    {
        $request = $this->getMyShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetMyShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetMyShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetMyShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetMyShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetMyShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyShipAsync
     *
     * Get Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShip'][0]
    ): PromiseInterface
    {
        return $this->getMyShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyShipAsyncWithHttpInfo
     *
     * Get Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getMyShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetMyShip200Response';
        $request = $this->getMyShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyShip'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMyShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getMyShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getMyShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyShipCargo
     *
     * Get Ship Cargo
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShipCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetMyShipCargo200Response
     */
    public function getMyShipCargo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShipCargo'][0]
    ): \OpenAPI\Client\Model\GetMyShipCargo200Response
    {
        list($response) = $this->getMyShipCargoWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getMyShipCargoWithHttpInfo
     *
     * Get Ship Cargo
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShipCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetMyShipCargo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyShipCargoWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShipCargo'][0]
    ): array
    {
        $request = $this->getMyShipCargoRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetMyShipCargo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetMyShipCargo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetMyShipCargo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetMyShipCargo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetMyShipCargo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyShipCargoAsync
     *
     * Get Ship Cargo
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShipCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipCargoAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getMyShipCargo'][0]
    ): PromiseInterface
    {
        return $this->getMyShipCargoAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyShipCargoAsyncWithHttpInfo
     *
     * Get Ship Cargo
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShipCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipCargoAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getMyShipCargo'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetMyShipCargo200Response';
        $request = $this->getMyShipCargoRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyShipCargo'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShipCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMyShipCargoRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getMyShipCargo'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getMyShipCargo'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/cargo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMyShips
     *
     * List Ships
     *
     * @param  int|null $page What entry offset to request (optional, default to 1)
     * @param  int|null $limit How many entries to return per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShips'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetMyShips200Response
     */
    public function getMyShips(
        ?int $page = 1,
        ?int $limit = 10,
        string $contentType = self::contentTypes['getMyShips'][0]
    ): \OpenAPI\Client\Model\GetMyShips200Response
    {
        list($response) = $this->getMyShipsWithHttpInfo($page, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getMyShipsWithHttpInfo
     *
     * List Ships
     *
     * @param  int|null $page What entry offset to request (optional, default to 1)
     * @param  int|null $limit How many entries to return per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShips'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetMyShips200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMyShipsWithHttpInfo(
        ?int $page = 1,
        ?int $limit = 10,
        string $contentType = self::contentTypes['getMyShips'][0]
    ): array
    {
        $request = $this->getMyShipsRequest($page, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetMyShips200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetMyShips200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetMyShips200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetMyShips200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetMyShips200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMyShipsAsync
     *
     * List Ships
     *
     * @param  int|null $page What entry offset to request (optional, default to 1)
     * @param  int|null $limit How many entries to return per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShips'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipsAsync(
        ?int $page = 1,
        ?int $limit = 10,
        string $contentType = self::contentTypes['getMyShips'][0]
    ): PromiseInterface
    {
        return $this->getMyShipsAsyncWithHttpInfo($page, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMyShipsAsyncWithHttpInfo
     *
     * List Ships
     *
     * @param  int|null $page What entry offset to request (optional, default to 1)
     * @param  int|null $limit How many entries to return per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShips'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMyShipsAsyncWithHttpInfo(
        $page = 1,
        $limit = 10,
        string $contentType = self::contentTypes['getMyShips'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetMyShips200Response';
        $request = $this->getMyShipsRequest($page, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMyShips'
     *
     * @param  int|null $page What entry offset to request (optional, default to 1)
     * @param  int|null $limit How many entries to return per page (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMyShips'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMyShipsRequest(
        $page = 1,
        $limit = 10,
        string $contentType = self::contentTypes['getMyShips'][0]
    ): Request
    {

        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling FleetApi.getMyShips, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit > 20) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling FleetApi.getMyShips, must be smaller than or equal to 20.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling FleetApi.getMyShips, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/my/ships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRepairShip
     *
     * Get Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRepairShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetRepairShip200Response
     */
    public function getRepairShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['getRepairShip'][0]
    ): \OpenAPI\Client\Model\GetRepairShip200Response
    {
        list($response) = $this->getRepairShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getRepairShipWithHttpInfo
     *
     * Get Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRepairShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetRepairShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRepairShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getRepairShip'][0]
    ): array
    {
        $request = $this->getRepairShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetRepairShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetRepairShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetRepairShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetRepairShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetRepairShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRepairShipAsync
     *
     * Get Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRepairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRepairShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getRepairShip'][0]
    ): PromiseInterface
    {
        return $this->getRepairShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRepairShipAsyncWithHttpInfo
     *
     * Get Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRepairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRepairShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getRepairShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetRepairShip200Response';
        $request = $this->getRepairShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRepairShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRepairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRepairShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getRepairShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getRepairShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/repair';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScrapShip
     *
     * Get Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getScrapShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetScrapShip200Response
     */
    public function getScrapShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['getScrapShip'][0]
    ): \OpenAPI\Client\Model\GetScrapShip200Response
    {
        list($response) = $this->getScrapShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getScrapShipWithHttpInfo
     *
     * Get Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getScrapShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetScrapShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getScrapShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getScrapShip'][0]
    ): array
    {
        $request = $this->getScrapShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetScrapShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetScrapShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetScrapShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetScrapShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetScrapShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getScrapShipAsync
     *
     * Get Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getScrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getScrapShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getScrapShip'][0]
    ): PromiseInterface
    {
        return $this->getScrapShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getScrapShipAsyncWithHttpInfo
     *
     * Get Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getScrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getScrapShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getScrapShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetScrapShip200Response';
        $request = $this->getScrapShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScrapShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getScrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getScrapShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getScrapShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getScrapShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/scrap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipCooldown
     *
     * Get Ship Cooldown
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipCooldown'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetShipCooldown200Response
     */
    public function getShipCooldown(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipCooldown'][0]
    ): \OpenAPI\Client\Model\GetShipCooldown200Response
    {
        list($response) = $this->getShipCooldownWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getShipCooldownWithHttpInfo
     *
     * Get Ship Cooldown
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipCooldown'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetShipCooldown200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipCooldownWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipCooldown'][0]
    ): array
    {
        $request = $this->getShipCooldownRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetShipCooldown200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetShipCooldown200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetShipCooldown200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetShipCooldown200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetShipCooldown200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipCooldownAsync
     *
     * Get Ship Cooldown
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipCooldown'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipCooldownAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipCooldown'][0]
    ): PromiseInterface
    {
        return $this->getShipCooldownAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipCooldownAsyncWithHttpInfo
     *
     * Get Ship Cooldown
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipCooldown'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipCooldownAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getShipCooldown'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetShipCooldown200Response';
        $request = $this->getShipCooldownRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipCooldown'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipCooldown'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipCooldownRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getShipCooldown'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getShipCooldown'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/cooldown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipNav
     *
     * Get Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipNav'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetShipNav200Response
     */
    public function getShipNav(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipNav'][0]
    ): \OpenAPI\Client\Model\GetShipNav200Response
    {
        list($response) = $this->getShipNavWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation getShipNavWithHttpInfo
     *
     * Get Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipNav'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetShipNav200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipNavWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipNav'][0]
    ): array
    {
        $request = $this->getShipNavRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetShipNav200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetShipNav200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetShipNav200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetShipNav200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetShipNav200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipNavAsync
     *
     * Get Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipNavAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['getShipNav'][0]
    ): PromiseInterface
    {
        return $this->getShipNavAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipNavAsyncWithHttpInfo
     *
     * Get Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipNavAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['getShipNav'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetShipNav200Response';
        $request = $this->getShipNavRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipNav'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipNavRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['getShipNav'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling getShipNav'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/nav';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation installMount
     *
     * Install Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\InstallMountRequest|null $installMountRequest installMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['installMount'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstallMount201Response
     */
    public function installMount(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\InstallMountRequest $installMountRequest = null,
        string $contentType = self::contentTypes['installMount'][0]
    ): \OpenAPI\Client\Model\InstallMount201Response
    {
        list($response) = $this->installMountWithHttpInfo($shipSymbol, $installMountRequest, $contentType);
        return $response;
    }

    /**
     * Operation installMountWithHttpInfo
     *
     * Install Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\InstallMountRequest|null $installMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['installMount'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstallMount201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function installMountWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\InstallMountRequest $installMountRequest = null,
        string $contentType = self::contentTypes['installMount'][0]
    ): array
    {
        $request = $this->installMountRequest($shipSymbol, $installMountRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\InstallMount201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InstallMount201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InstallMount201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InstallMount201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstallMount201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation installMountAsync
     *
     * Install Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\InstallMountRequest|null $installMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['installMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function installMountAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\InstallMountRequest $installMountRequest = null,
        string $contentType = self::contentTypes['installMount'][0]
    ): PromiseInterface
    {
        return $this->installMountAsyncWithHttpInfo($shipSymbol, $installMountRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation installMountAsyncWithHttpInfo
     *
     * Install Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\InstallMountRequest|null $installMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['installMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function installMountAsyncWithHttpInfo(
        $shipSymbol,
        $installMountRequest = null,
        string $contentType = self::contentTypes['installMount'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\InstallMount201Response';
        $request = $this->installMountRequest($shipSymbol, $installMountRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'installMount'
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\InstallMountRequest|null $installMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['installMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function installMountRequest(
        $shipSymbol,
        $installMountRequest = null,
        string $contentType = self::contentTypes['installMount'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling installMount'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/mounts/install';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($installMountRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($installMountRequest));
            } else {
                $httpBody = $installMountRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jettison
     *
     * Jettison Cargo
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JettisonRequest|null $jettisonRequest jettisonRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jettison'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\Jettison200Response
     */
    public function jettison(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JettisonRequest $jettisonRequest = null,
        string $contentType = self::contentTypes['jettison'][0]
    ): \OpenAPI\Client\Model\Jettison200Response
    {
        list($response) = $this->jettisonWithHttpInfo($shipSymbol, $jettisonRequest, $contentType);
        return $response;
    }

    /**
     * Operation jettisonWithHttpInfo
     *
     * Jettison Cargo
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JettisonRequest|null $jettisonRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jettison'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Jettison200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function jettisonWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JettisonRequest $jettisonRequest = null,
        string $contentType = self::contentTypes['jettison'][0]
    ): array
    {
        $request = $this->jettisonRequest($shipSymbol, $jettisonRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Jettison200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Jettison200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Jettison200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Jettison200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Jettison200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jettisonAsync
     *
     * Jettison Cargo
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JettisonRequest|null $jettisonRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jettison'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function jettisonAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JettisonRequest $jettisonRequest = null,
        string $contentType = self::contentTypes['jettison'][0]
    ): PromiseInterface
    {
        return $this->jettisonAsyncWithHttpInfo($shipSymbol, $jettisonRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jettisonAsyncWithHttpInfo
     *
     * Jettison Cargo
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JettisonRequest|null $jettisonRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jettison'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function jettisonAsyncWithHttpInfo(
        $shipSymbol,
        $jettisonRequest = null,
        string $contentType = self::contentTypes['jettison'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\Jettison200Response';
        $request = $this->jettisonRequest($shipSymbol, $jettisonRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jettison'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JettisonRequest|null $jettisonRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jettison'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jettisonRequest(
        $shipSymbol,
        $jettisonRequest = null,
        string $contentType = self::contentTypes['jettison'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling jettison'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/jettison';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($jettisonRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($jettisonRequest));
            } else {
                $httpBody = $jettisonRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jumpShip
     *
     * Jump Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JumpShipRequest|null $jumpShipRequest jumpShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jumpShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\JumpShip200Response
     */
    public function jumpShip(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JumpShipRequest $jumpShipRequest = null,
        string $contentType = self::contentTypes['jumpShip'][0]
    ): \OpenAPI\Client\Model\JumpShip200Response
    {
        list($response) = $this->jumpShipWithHttpInfo($shipSymbol, $jumpShipRequest, $contentType);
        return $response;
    }

    /**
     * Operation jumpShipWithHttpInfo
     *
     * Jump Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JumpShipRequest|null $jumpShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jumpShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JumpShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function jumpShipWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JumpShipRequest $jumpShipRequest = null,
        string $contentType = self::contentTypes['jumpShip'][0]
    ): array
    {
        $request = $this->jumpShipRequest($shipSymbol, $jumpShipRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JumpShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JumpShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JumpShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JumpShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JumpShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jumpShipAsync
     *
     * Jump Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JumpShipRequest|null $jumpShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jumpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function jumpShipAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\JumpShipRequest $jumpShipRequest = null,
        string $contentType = self::contentTypes['jumpShip'][0]
    ): PromiseInterface
    {
        return $this->jumpShipAsyncWithHttpInfo($shipSymbol, $jumpShipRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jumpShipAsyncWithHttpInfo
     *
     * Jump Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JumpShipRequest|null $jumpShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jumpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function jumpShipAsyncWithHttpInfo(
        $shipSymbol,
        $jumpShipRequest = null,
        string $contentType = self::contentTypes['jumpShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\JumpShip200Response';
        $request = $this->jumpShipRequest($shipSymbol, $jumpShipRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jumpShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\JumpShipRequest|null $jumpShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['jumpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jumpShipRequest(
        $shipSymbol,
        $jumpShipRequest = null,
        string $contentType = self::contentTypes['jumpShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling jumpShip'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/jump';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($jumpShipRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($jumpShipRequest));
            } else {
                $httpBody = $jumpShipRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation navigateShip
     *
     * Navigate Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['navigateShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\NavigateShip200Response
     */
    public function navigateShip(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['navigateShip'][0]
    ): \OpenAPI\Client\Model\NavigateShip200Response
    {
        list($response) = $this->navigateShipWithHttpInfo($shipSymbol, $navigateShipRequest, $contentType);
        return $response;
    }

    /**
     * Operation navigateShipWithHttpInfo
     *
     * Navigate Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['navigateShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NavigateShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function navigateShipWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['navigateShip'][0]
    ): array
    {
        $request = $this->navigateShipRequest($shipSymbol, $navigateShipRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\NavigateShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NavigateShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NavigateShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NavigateShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NavigateShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation navigateShipAsync
     *
     * Navigate Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['navigateShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function navigateShipAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['navigateShip'][0]
    ): PromiseInterface
    {
        return $this->navigateShipAsyncWithHttpInfo($shipSymbol, $navigateShipRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation navigateShipAsyncWithHttpInfo
     *
     * Navigate Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['navigateShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function navigateShipAsyncWithHttpInfo(
        $shipSymbol,
        $navigateShipRequest = null,
        string $contentType = self::contentTypes['navigateShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\NavigateShip200Response';
        $request = $this->navigateShipRequest($shipSymbol, $navigateShipRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'navigateShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['navigateShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function navigateShipRequest(
        $shipSymbol,
        $navigateShipRequest = null,
        string $contentType = self::contentTypes['navigateShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling navigateShip'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/navigate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($navigateShipRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($navigateShipRequest));
            } else {
                $httpBody = $navigateShipRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation negotiateContract
     *
     * Negotiate Contract
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['negotiateContract'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\NegotiateContract200Response
     */
    public function negotiateContract(
        string $shipSymbol,
        string $contentType = self::contentTypes['negotiateContract'][0]
    ): \OpenAPI\Client\Model\NegotiateContract200Response
    {
        list($response) = $this->negotiateContractWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation negotiateContractWithHttpInfo
     *
     * Negotiate Contract
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['negotiateContract'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\NegotiateContract200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function negotiateContractWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['negotiateContract'][0]
    ): array
    {
        $request = $this->negotiateContractRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\NegotiateContract200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NegotiateContract200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NegotiateContract200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\NegotiateContract200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NegotiateContract200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation negotiateContractAsync
     *
     * Negotiate Contract
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['negotiateContract'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function negotiateContractAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['negotiateContract'][0]
    ): PromiseInterface
    {
        return $this->negotiateContractAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation negotiateContractAsyncWithHttpInfo
     *
     * Negotiate Contract
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['negotiateContract'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function negotiateContractAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['negotiateContract'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\NegotiateContract200Response';
        $request = $this->negotiateContractRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'negotiateContract'
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['negotiateContract'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function negotiateContractRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['negotiateContract'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling negotiateContract'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/negotiate/contract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orbitShip
     *
     * Orbit Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orbitShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrbitShip200Response
     */
    public function orbitShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['orbitShip'][0]
    ): \OpenAPI\Client\Model\OrbitShip200Response
    {
        list($response) = $this->orbitShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation orbitShipWithHttpInfo
     *
     * Orbit Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orbitShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrbitShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function orbitShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['orbitShip'][0]
    ): array
    {
        $request = $this->orbitShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrbitShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrbitShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrbitShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OrbitShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrbitShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orbitShipAsync
     *
     * Orbit Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orbitShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function orbitShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['orbitShip'][0]
    ): PromiseInterface
    {
        return $this->orbitShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orbitShipAsyncWithHttpInfo
     *
     * Orbit Ship
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orbitShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function orbitShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['orbitShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\OrbitShip200Response';
        $request = $this->orbitShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orbitShip'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orbitShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orbitShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['orbitShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling orbitShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/orbit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchShipNav
     *
     * Patch Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\PatchShipNavRequest|null $patchShipNavRequest patchShipNavRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchShipNav'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetShipNav200Response
     */
    public function patchShipNav(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PatchShipNavRequest $patchShipNavRequest = null,
        string $contentType = self::contentTypes['patchShipNav'][0]
    ): \OpenAPI\Client\Model\GetShipNav200Response
    {
        list($response) = $this->patchShipNavWithHttpInfo($shipSymbol, $patchShipNavRequest, $contentType);
        return $response;
    }

    /**
     * Operation patchShipNavWithHttpInfo
     *
     * Patch Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\PatchShipNavRequest|null $patchShipNavRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchShipNav'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetShipNav200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchShipNavWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PatchShipNavRequest $patchShipNavRequest = null,
        string $contentType = self::contentTypes['patchShipNav'][0]
    ): array
    {
        $request = $this->patchShipNavRequest($shipSymbol, $patchShipNavRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetShipNav200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetShipNav200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetShipNav200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetShipNav200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetShipNav200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchShipNavAsync
     *
     * Patch Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\PatchShipNavRequest|null $patchShipNavRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function patchShipNavAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PatchShipNavRequest $patchShipNavRequest = null,
        string $contentType = self::contentTypes['patchShipNav'][0]
    ): PromiseInterface
    {
        return $this->patchShipNavAsyncWithHttpInfo($shipSymbol, $patchShipNavRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchShipNavAsyncWithHttpInfo
     *
     * Patch Ship Nav
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\PatchShipNavRequest|null $patchShipNavRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function patchShipNavAsyncWithHttpInfo(
        $shipSymbol,
        $patchShipNavRequest = null,
        string $contentType = self::contentTypes['patchShipNav'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GetShipNav200Response';
        $request = $this->patchShipNavRequest($shipSymbol, $patchShipNavRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchShipNav'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\PatchShipNavRequest|null $patchShipNavRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchShipNav'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchShipNavRequest(
        $shipSymbol,
        $patchShipNavRequest = null,
        string $contentType = self::contentTypes['patchShipNav'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling patchShipNav'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/nav';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patchShipNavRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patchShipNavRequest));
            } else {
                $httpBody = $patchShipNavRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseCargo
     *
     * Purchase Cargo
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\PurchaseCargoRequest|null $purchaseCargoRequest purchaseCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\PurchaseCargo201Response
     */
    public function purchaseCargo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PurchaseCargoRequest $purchaseCargoRequest = null,
        string $contentType = self::contentTypes['purchaseCargo'][0]
    ): \OpenAPI\Client\Model\PurchaseCargo201Response
    {
        list($response) = $this->purchaseCargoWithHttpInfo($shipSymbol, $purchaseCargoRequest, $contentType);
        return $response;
    }

    /**
     * Operation purchaseCargoWithHttpInfo
     *
     * Purchase Cargo
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\PurchaseCargoRequest|null $purchaseCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PurchaseCargo201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseCargoWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PurchaseCargoRequest $purchaseCargoRequest = null,
        string $contentType = self::contentTypes['purchaseCargo'][0]
    ): array
    {
        $request = $this->purchaseCargoRequest($shipSymbol, $purchaseCargoRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PurchaseCargo201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PurchaseCargo201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PurchaseCargo201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PurchaseCargo201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PurchaseCargo201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseCargoAsync
     *
     * Purchase Cargo
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\PurchaseCargoRequest|null $purchaseCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function purchaseCargoAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\PurchaseCargoRequest $purchaseCargoRequest = null,
        string $contentType = self::contentTypes['purchaseCargo'][0]
    ): PromiseInterface
    {
        return $this->purchaseCargoAsyncWithHttpInfo($shipSymbol, $purchaseCargoRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseCargoAsyncWithHttpInfo
     *
     * Purchase Cargo
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\PurchaseCargoRequest|null $purchaseCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function purchaseCargoAsyncWithHttpInfo(
        $shipSymbol,
        $purchaseCargoRequest = null,
        string $contentType = self::contentTypes['purchaseCargo'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\PurchaseCargo201Response';
        $request = $this->purchaseCargoRequest($shipSymbol, $purchaseCargoRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseCargo'
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\PurchaseCargoRequest|null $purchaseCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseCargoRequest(
        $shipSymbol,
        $purchaseCargoRequest = null,
        string $contentType = self::contentTypes['purchaseCargo'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling purchaseCargo'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/purchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($purchaseCargoRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($purchaseCargoRequest));
            } else {
                $httpBody = $purchaseCargoRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseShip
     *
     * Purchase Ship
     *
     * @param  \OpenAPI\Client\Model\PurchaseShipRequest|null $purchaseShipRequest purchaseShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\PurchaseShip201Response
     */
    public function purchaseShip(
        ?\OpenAPI\Client\Model\PurchaseShipRequest $purchaseShipRequest = null,
        string $contentType = self::contentTypes['purchaseShip'][0]
    ): \OpenAPI\Client\Model\PurchaseShip201Response
    {
        list($response) = $this->purchaseShipWithHttpInfo($purchaseShipRequest, $contentType);
        return $response;
    }

    /**
     * Operation purchaseShipWithHttpInfo
     *
     * Purchase Ship
     *
     * @param  \OpenAPI\Client\Model\PurchaseShipRequest|null $purchaseShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PurchaseShip201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseShipWithHttpInfo(
        ?\OpenAPI\Client\Model\PurchaseShipRequest $purchaseShipRequest = null,
        string $contentType = self::contentTypes['purchaseShip'][0]
    ): array
    {
        $request = $this->purchaseShipRequest($purchaseShipRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PurchaseShip201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PurchaseShip201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PurchaseShip201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PurchaseShip201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PurchaseShip201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseShipAsync
     *
     * Purchase Ship
     *
     * @param  \OpenAPI\Client\Model\PurchaseShipRequest|null $purchaseShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function purchaseShipAsync(
        ?\OpenAPI\Client\Model\PurchaseShipRequest $purchaseShipRequest = null,
        string $contentType = self::contentTypes['purchaseShip'][0]
    ): PromiseInterface
    {
        return $this->purchaseShipAsyncWithHttpInfo($purchaseShipRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseShipAsyncWithHttpInfo
     *
     * Purchase Ship
     *
     * @param  \OpenAPI\Client\Model\PurchaseShipRequest|null $purchaseShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function purchaseShipAsyncWithHttpInfo(
        $purchaseShipRequest = null,
        string $contentType = self::contentTypes['purchaseShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\PurchaseShip201Response';
        $request = $this->purchaseShipRequest($purchaseShipRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseShip'
     *
     * @param  \OpenAPI\Client\Model\PurchaseShipRequest|null $purchaseShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseShipRequest(
        $purchaseShipRequest = null,
        string $contentType = self::contentTypes['purchaseShip'][0]
    ): Request
    {



        $resourcePath = '/my/ships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($purchaseShipRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($purchaseShipRequest));
            } else {
                $httpBody = $purchaseShipRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refuelShip
     *
     * Refuel Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\RefuelShipRequest|null $refuelShipRequest refuelShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refuelShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\RefuelShip200Response
     */
    public function refuelShip(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RefuelShipRequest $refuelShipRequest = null,
        string $contentType = self::contentTypes['refuelShip'][0]
    ): \OpenAPI\Client\Model\RefuelShip200Response
    {
        list($response) = $this->refuelShipWithHttpInfo($shipSymbol, $refuelShipRequest, $contentType);
        return $response;
    }

    /**
     * Operation refuelShipWithHttpInfo
     *
     * Refuel Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\RefuelShipRequest|null $refuelShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refuelShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RefuelShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function refuelShipWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RefuelShipRequest $refuelShipRequest = null,
        string $contentType = self::contentTypes['refuelShip'][0]
    ): array
    {
        $request = $this->refuelShipRequest($shipSymbol, $refuelShipRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RefuelShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RefuelShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RefuelShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RefuelShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RefuelShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refuelShipAsync
     *
     * Refuel Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\RefuelShipRequest|null $refuelShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refuelShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function refuelShipAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RefuelShipRequest $refuelShipRequest = null,
        string $contentType = self::contentTypes['refuelShip'][0]
    ): PromiseInterface
    {
        return $this->refuelShipAsyncWithHttpInfo($shipSymbol, $refuelShipRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refuelShipAsyncWithHttpInfo
     *
     * Refuel Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\RefuelShipRequest|null $refuelShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refuelShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function refuelShipAsyncWithHttpInfo(
        $shipSymbol,
        $refuelShipRequest = null,
        string $contentType = self::contentTypes['refuelShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\RefuelShip200Response';
        $request = $this->refuelShipRequest($shipSymbol, $refuelShipRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refuelShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\RefuelShipRequest|null $refuelShipRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refuelShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refuelShipRequest(
        $shipSymbol,
        $refuelShipRequest = null,
        string $contentType = self::contentTypes['refuelShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling refuelShip'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/refuel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refuelShipRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refuelShipRequest));
            } else {
                $httpBody = $refuelShipRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMount
     *
     * Remove Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\RemoveMountRequest|null $removeMountRequest removeMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMount'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoveMount201Response
     */
    public function removeMount(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RemoveMountRequest $removeMountRequest = null,
        string $contentType = self::contentTypes['removeMount'][0]
    ): \OpenAPI\Client\Model\RemoveMount201Response
    {
        list($response) = $this->removeMountWithHttpInfo($shipSymbol, $removeMountRequest, $contentType);
        return $response;
    }

    /**
     * Operation removeMountWithHttpInfo
     *
     * Remove Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\RemoveMountRequest|null $removeMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMount'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoveMount201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMountWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RemoveMountRequest $removeMountRequest = null,
        string $contentType = self::contentTypes['removeMount'][0]
    ): array
    {
        $request = $this->removeMountRequest($shipSymbol, $removeMountRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\RemoveMount201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoveMount201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoveMount201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoveMount201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoveMount201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMountAsync
     *
     * Remove Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\RemoveMountRequest|null $removeMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removeMountAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\RemoveMountRequest $removeMountRequest = null,
        string $contentType = self::contentTypes['removeMount'][0]
    ): PromiseInterface
    {
        return $this->removeMountAsyncWithHttpInfo($shipSymbol, $removeMountRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeMountAsyncWithHttpInfo
     *
     * Remove Mount
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\RemoveMountRequest|null $removeMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function removeMountAsyncWithHttpInfo(
        $shipSymbol,
        $removeMountRequest = null,
        string $contentType = self::contentTypes['removeMount'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\RemoveMount201Response';
        $request = $this->removeMountRequest($shipSymbol, $removeMountRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMount'
     *
     * @param  string $shipSymbol The ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\RemoveMountRequest|null $removeMountRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeMount'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeMountRequest(
        $shipSymbol,
        $removeMountRequest = null,
        string $contentType = self::contentTypes['removeMount'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling removeMount'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/mounts/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($removeMountRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($removeMountRequest));
            } else {
                $httpBody = $removeMountRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation repairShip
     *
     * Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\RepairShip200Response
     */
    public function repairShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['repairShip'][0]
    ): \OpenAPI\Client\Model\RepairShip200Response
    {
        list($response) = $this->repairShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation repairShipWithHttpInfo
     *
     * Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RepairShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function repairShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['repairShip'][0]
    ): array
    {
        $request = $this->repairShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RepairShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RepairShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RepairShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RepairShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RepairShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation repairShipAsync
     *
     * Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function repairShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['repairShip'][0]
    ): PromiseInterface
    {
        return $this->repairShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation repairShipAsyncWithHttpInfo
     *
     * Repair Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function repairShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['repairShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\RepairShip200Response';
        $request = $this->repairShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'repairShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['repairShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function repairShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['repairShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling repairShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/repair';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scrapShip
     *
     * Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['scrapShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ScrapShip200Response
     */
    public function scrapShip(
        string $shipSymbol,
        string $contentType = self::contentTypes['scrapShip'][0]
    ): \OpenAPI\Client\Model\ScrapShip200Response
    {
        list($response) = $this->scrapShipWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation scrapShipWithHttpInfo
     *
     * Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['scrapShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ScrapShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function scrapShipWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['scrapShip'][0]
    ): array
    {
        $request = $this->scrapShipRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ScrapShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ScrapShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ScrapShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ScrapShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ScrapShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scrapShipAsync
     *
     * Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['scrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function scrapShipAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['scrapShip'][0]
    ): PromiseInterface
    {
        return $this->scrapShipAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scrapShipAsyncWithHttpInfo
     *
     * Scrap Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['scrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function scrapShipAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['scrapShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ScrapShip200Response';
        $request = $this->scrapShipRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scrapShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['scrapShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scrapShipRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['scrapShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling scrapShip'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/scrap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sellCargo
     *
     * Sell Cargo
     *
     * @param  string $shipSymbol Symbol of a ship. (required)
     * @param  \OpenAPI\Client\Model\SellCargoRequest|null $sellCargoRequest sellCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sellCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\SellCargo201Response
     */
    public function sellCargo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\SellCargoRequest $sellCargoRequest = null,
        string $contentType = self::contentTypes['sellCargo'][0]
    ): \OpenAPI\Client\Model\SellCargo201Response
    {
        list($response) = $this->sellCargoWithHttpInfo($shipSymbol, $sellCargoRequest, $contentType);
        return $response;
    }

    /**
     * Operation sellCargoWithHttpInfo
     *
     * Sell Cargo
     *
     * @param  string $shipSymbol Symbol of a ship. (required)
     * @param  \OpenAPI\Client\Model\SellCargoRequest|null $sellCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sellCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SellCargo201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellCargoWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\SellCargoRequest $sellCargoRequest = null,
        string $contentType = self::contentTypes['sellCargo'][0]
    ): array
    {
        $request = $this->sellCargoRequest($shipSymbol, $sellCargoRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\SellCargo201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SellCargo201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SellCargo201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SellCargo201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SellCargo201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellCargoAsync
     *
     * Sell Cargo
     *
     * @param  string $shipSymbol Symbol of a ship. (required)
     * @param  \OpenAPI\Client\Model\SellCargoRequest|null $sellCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sellCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sellCargoAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\SellCargoRequest $sellCargoRequest = null,
        string $contentType = self::contentTypes['sellCargo'][0]
    ): PromiseInterface
    {
        return $this->sellCargoAsyncWithHttpInfo($shipSymbol, $sellCargoRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellCargoAsyncWithHttpInfo
     *
     * Sell Cargo
     *
     * @param  string $shipSymbol Symbol of a ship. (required)
     * @param  \OpenAPI\Client\Model\SellCargoRequest|null $sellCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sellCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sellCargoAsyncWithHttpInfo(
        $shipSymbol,
        $sellCargoRequest = null,
        string $contentType = self::contentTypes['sellCargo'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\SellCargo201Response';
        $request = $this->sellCargoRequest($shipSymbol, $sellCargoRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellCargo'
     *
     * @param  string $shipSymbol Symbol of a ship. (required)
     * @param  \OpenAPI\Client\Model\SellCargoRequest|null $sellCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sellCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sellCargoRequest(
        $shipSymbol,
        $sellCargoRequest = null,
        string $contentType = self::contentTypes['sellCargo'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling sellCargo'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/sell';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sellCargoRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sellCargoRequest));
            } else {
                $httpBody = $sellCargoRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipRefine
     *
     * Ship Refine
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  \OpenAPI\Client\Model\ShipRefineRequest|null $shipRefineRequest shipRefineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipRefine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ShipRefine201Response
     */
    public function shipRefine(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ShipRefineRequest $shipRefineRequest = null,
        string $contentType = self::contentTypes['shipRefine'][0]
    ): \OpenAPI\Client\Model\ShipRefine201Response
    {
        list($response) = $this->shipRefineWithHttpInfo($shipSymbol, $shipRefineRequest, $contentType);
        return $response;
    }

    /**
     * Operation shipRefineWithHttpInfo
     *
     * Ship Refine
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  \OpenAPI\Client\Model\ShipRefineRequest|null $shipRefineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipRefine'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ShipRefine201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipRefineWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ShipRefineRequest $shipRefineRequest = null,
        string $contentType = self::contentTypes['shipRefine'][0]
    ): array
    {
        $request = $this->shipRefineRequest($shipSymbol, $shipRefineRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ShipRefine201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ShipRefine201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ShipRefine201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ShipRefine201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ShipRefine201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipRefineAsync
     *
     * Ship Refine
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  \OpenAPI\Client\Model\ShipRefineRequest|null $shipRefineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipRefine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function shipRefineAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\ShipRefineRequest $shipRefineRequest = null,
        string $contentType = self::contentTypes['shipRefine'][0]
    ): PromiseInterface
    {
        return $this->shipRefineAsyncWithHttpInfo($shipSymbol, $shipRefineRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipRefineAsyncWithHttpInfo
     *
     * Ship Refine
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  \OpenAPI\Client\Model\ShipRefineRequest|null $shipRefineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipRefine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function shipRefineAsyncWithHttpInfo(
        $shipSymbol,
        $shipRefineRequest = null,
        string $contentType = self::contentTypes['shipRefine'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ShipRefine201Response';
        $request = $this->shipRefineRequest($shipSymbol, $shipRefineRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipRefine'
     *
     * @param  string $shipSymbol The symbol of the ship. (required)
     * @param  \OpenAPI\Client\Model\ShipRefineRequest|null $shipRefineRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['shipRefine'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function shipRefineRequest(
        $shipSymbol,
        $shipRefineRequest = null,
        string $contentType = self::contentTypes['shipRefine'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling shipRefine'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/refine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($shipRefineRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($shipRefineRequest));
            } else {
                $httpBody = $shipRefineRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siphonResources
     *
     * Siphon Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siphonResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\SiphonResources201Response
     */
    public function siphonResources(
        string $shipSymbol,
        string $contentType = self::contentTypes['siphonResources'][0]
    ): \OpenAPI\Client\Model\SiphonResources201Response
    {
        list($response) = $this->siphonResourcesWithHttpInfo($shipSymbol, $contentType);
        return $response;
    }

    /**
     * Operation siphonResourcesWithHttpInfo
     *
     * Siphon Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siphonResources'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SiphonResources201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function siphonResourcesWithHttpInfo(
        string $shipSymbol,
        string $contentType = self::contentTypes['siphonResources'][0]
    ): array
    {
        $request = $this->siphonResourcesRequest($shipSymbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\SiphonResources201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SiphonResources201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SiphonResources201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SiphonResources201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SiphonResources201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siphonResourcesAsync
     *
     * Siphon Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siphonResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function siphonResourcesAsync(
        string $shipSymbol,
        string $contentType = self::contentTypes['siphonResources'][0]
    ): PromiseInterface
    {
        return $this->siphonResourcesAsyncWithHttpInfo($shipSymbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siphonResourcesAsyncWithHttpInfo
     *
     * Siphon Resources
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siphonResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function siphonResourcesAsyncWithHttpInfo(
        $shipSymbol,
        string $contentType = self::contentTypes['siphonResources'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\SiphonResources201Response';
        $request = $this->siphonResourcesRequest($shipSymbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siphonResources'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siphonResources'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siphonResourcesRequest(
        $shipSymbol,
        string $contentType = self::contentTypes['siphonResources'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling siphonResources'
            );
        }


        $resourcePath = '/my/ships/{shipSymbol}/siphon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferCargo
     *
     * Transfer Cargo
     *
     * @param  string $shipSymbol The transferring ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\TransferCargoRequest|null $transferCargoRequest transferCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransferCargo200Response
     */
    public function transferCargo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\TransferCargoRequest $transferCargoRequest = null,
        string $contentType = self::contentTypes['transferCargo'][0]
    ): \OpenAPI\Client\Model\TransferCargo200Response
    {
        list($response) = $this->transferCargoWithHttpInfo($shipSymbol, $transferCargoRequest, $contentType);
        return $response;
    }

    /**
     * Operation transferCargoWithHttpInfo
     *
     * Transfer Cargo
     *
     * @param  string $shipSymbol The transferring ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\TransferCargoRequest|null $transferCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferCargo'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransferCargo200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferCargoWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\TransferCargoRequest $transferCargoRequest = null,
        string $contentType = self::contentTypes['transferCargo'][0]
    ): array
    {
        $request = $this->transferCargoRequest($shipSymbol, $transferCargoRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransferCargo200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransferCargo200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransferCargo200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransferCargo200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransferCargo200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferCargoAsync
     *
     * Transfer Cargo
     *
     * @param  string $shipSymbol The transferring ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\TransferCargoRequest|null $transferCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transferCargoAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\TransferCargoRequest $transferCargoRequest = null,
        string $contentType = self::contentTypes['transferCargo'][0]
    ): PromiseInterface
    {
        return $this->transferCargoAsyncWithHttpInfo($shipSymbol, $transferCargoRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferCargoAsyncWithHttpInfo
     *
     * Transfer Cargo
     *
     * @param  string $shipSymbol The transferring ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\TransferCargoRequest|null $transferCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transferCargoAsyncWithHttpInfo(
        $shipSymbol,
        $transferCargoRequest = null,
        string $contentType = self::contentTypes['transferCargo'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\TransferCargo200Response';
        $request = $this->transferCargoRequest($shipSymbol, $transferCargoRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferCargo'
     *
     * @param  string $shipSymbol The transferring ship&#39;s symbol. (required)
     * @param  \OpenAPI\Client\Model\TransferCargoRequest|null $transferCargoRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferCargo'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferCargoRequest(
        $shipSymbol,
        $transferCargoRequest = null,
        string $contentType = self::contentTypes['transferCargo'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling transferCargo'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transferCargoRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transferCargoRequest));
            } else {
                $httpBody = $transferCargoRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warpShip
     *
     * Warp Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warpShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\WarpShip200Response
     */
    public function warpShip(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['warpShip'][0]
    ): \OpenAPI\Client\Model\WarpShip200Response
    {
        list($response) = $this->warpShipWithHttpInfo($shipSymbol, $navigateShipRequest, $contentType);
        return $response;
    }

    /**
     * Operation warpShipWithHttpInfo
     *
     * Warp Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warpShip'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WarpShip200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function warpShipWithHttpInfo(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['warpShip'][0]
    ): array
    {
        $request = $this->warpShipRequest($shipSymbol, $navigateShipRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\WarpShip200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\WarpShip200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\WarpShip200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\WarpShip200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WarpShip200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warpShipAsync
     *
     * Warp Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function warpShipAsync(
        string $shipSymbol,
        ?\OpenAPI\Client\Model\NavigateShipRequest $navigateShipRequest = null,
        string $contentType = self::contentTypes['warpShip'][0]
    ): PromiseInterface
    {
        return $this->warpShipAsyncWithHttpInfo($shipSymbol, $navigateShipRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warpShipAsyncWithHttpInfo
     *
     * Warp Ship
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function warpShipAsyncWithHttpInfo(
        $shipSymbol,
        $navigateShipRequest = null,
        string $contentType = self::contentTypes['warpShip'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\WarpShip200Response';
        $request = $this->warpShipRequest($shipSymbol, $navigateShipRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warpShip'
     *
     * @param  string $shipSymbol The ship symbol. (required)
     * @param  \OpenAPI\Client\Model\NavigateShipRequest|null $navigateShipRequest  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['warpShip'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function warpShipRequest(
        $shipSymbol,
        $navigateShipRequest = null,
        string $contentType = self::contentTypes['warpShip'][0]
    ): Request
    {

        // verify the required parameter 'shipSymbol' is set
        if ($shipSymbol === null || (is_array($shipSymbol) && count($shipSymbol) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipSymbol when calling warpShip'
            );
        }



        $resourcePath = '/my/ships/{shipSymbol}/warp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipSymbol !== null) {
            $resourcePath = str_replace(
                '{' . 'shipSymbol' . '}',
                ObjectSerializer::toPathValue($shipSymbol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($navigateShipRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($navigateShipRequest));
            } else {
                $httpBody = $navigateShipRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
