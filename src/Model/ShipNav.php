<?php
/**
 * ShipNav
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ShipNav Class Doc Comment
 *
 * @description The navigation information of the ship.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ShipNav implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipNav';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'systemSymbol' => 'string',
        'waypointSymbol' => 'string',
        'route' => '\OpenAPI\Client\Model\ShipNavRoute',
        'status' => '\OpenAPI\Client\Model\ShipNavStatus',
        'flightMode' => '\OpenAPI\Client\Model\ShipNavFlightMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'systemSymbol' => null,
        'waypointSymbol' => null,
        'route' => null,
        'status' => null,
        'flightMode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'systemSymbol' => false,
        'waypointSymbol' => false,
        'route' => false,
        'status' => false,
        'flightMode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'systemSymbol' => 'systemSymbol',
        'waypointSymbol' => 'waypointSymbol',
        'route' => 'route',
        'status' => 'status',
        'flightMode' => 'flightMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'systemSymbol' => 'setSystemSymbol',
        'waypointSymbol' => 'setWaypointSymbol',
        'route' => 'setRoute',
        'status' => 'setStatus',
        'flightMode' => 'setFlightMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'systemSymbol' => 'getSystemSymbol',
        'waypointSymbol' => 'getWaypointSymbol',
        'route' => 'getRoute',
        'status' => 'getStatus',
        'flightMode' => 'getFlightMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('systemSymbol', $data ?? [], null);
        $this->setIfExists('waypointSymbol', $data ?? [], null);
        $this->setIfExists('route', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('flightMode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['systemSymbol'] === null) {
            $invalidProperties[] = "'systemSymbol' can't be null";
        }
        if ((mb_strlen($this->container['systemSymbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'systemSymbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['waypointSymbol'] === null) {
            $invalidProperties[] = "'waypointSymbol' can't be null";
        }
        if ((mb_strlen($this->container['waypointSymbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'waypointSymbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['route'] === null) {
            $invalidProperties[] = "'route' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['flightMode'] === null) {
            $invalidProperties[] = "'flightMode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets systemSymbol
     *
     * @return string
     */
    public function getSystemSymbol(): string
    {
        return $this->container['systemSymbol'];
    }

    /**
     * Sets systemSymbol
     *
     * @param string $systemSymbol The symbol of the system.
     *
     * @return $this
     */
    public function setSystemSymbol(string $systemSymbol): static
    {
        if (is_null($systemSymbol)) {
            throw new InvalidArgumentException('non-nullable systemSymbol cannot be null');
        }

        if ((mb_strlen($systemSymbol) < 1)) {
            throw new InvalidArgumentException('invalid length for $systemSymbol when calling ShipNav., must be bigger than or equal to 1.');
        }

        $this->container['systemSymbol'] = $systemSymbol;

        return $this;
    }

    /**
     * Gets waypointSymbol
     *
     * @return string
     */
    public function getWaypointSymbol(): string
    {
        return $this->container['waypointSymbol'];
    }

    /**
     * Sets waypointSymbol
     *
     * @param string $waypointSymbol The symbol of the waypoint.
     *
     * @return $this
     */
    public function setWaypointSymbol(string $waypointSymbol): static
    {
        if (is_null($waypointSymbol)) {
            throw new InvalidArgumentException('non-nullable waypointSymbol cannot be null');
        }

        if ((mb_strlen($waypointSymbol) < 1)) {
            throw new InvalidArgumentException('invalid length for $waypointSymbol when calling ShipNav., must be bigger than or equal to 1.');
        }

        $this->container['waypointSymbol'] = $waypointSymbol;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \OpenAPI\Client\Model\ShipNavRoute
     */
    public function getRoute(): \OpenAPI\Client\Model\ShipNavRoute
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \OpenAPI\Client\Model\ShipNavRoute $route route
     *
     * @return $this
     */
    public function setRoute(\OpenAPI\Client\Model\ShipNavRoute $route): static
    {
        if (is_null($route)) {
            throw new InvalidArgumentException('non-nullable route cannot be null');
        }
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ShipNavStatus
     */
    public function getStatus(): \OpenAPI\Client\Model\ShipNavStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ShipNavStatus $status status
     *
     * @return $this
     */
    public function setStatus(\OpenAPI\Client\Model\ShipNavStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets flightMode
     *
     * @return \OpenAPI\Client\Model\ShipNavFlightMode
     */
    public function getFlightMode(): \OpenAPI\Client\Model\ShipNavFlightMode
    {
        return $this->container['flightMode'];
    }

    /**
     * Sets flightMode
     *
     * @param \OpenAPI\Client\Model\ShipNavFlightMode $flightMode flightMode
     *
     * @return $this
     */
    public function setFlightMode(\OpenAPI\Client\Model\ShipNavFlightMode $flightMode): static
    {
        if (is_null($flightMode)) {
            throw new InvalidArgumentException('non-nullable flightMode cannot be null');
        }
        $this->container['flightMode'] = $flightMode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


