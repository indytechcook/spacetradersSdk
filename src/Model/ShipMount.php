<?php
/**
 * ShipMount
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ShipMount Class Doc Comment
 *
 * @description A mount is installed on the exterier of a ship.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ShipMount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipMount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'symbol' => 'string',
        'name' => 'string',
        'description' => 'string',
        'strength' => 'int',
        'deposits' => 'string[]',
        'requirements' => '\OpenAPI\Client\Model\ShipRequirements'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'symbol' => null,
        'name' => null,
        'description' => null,
        'strength' => null,
        'deposits' => null,
        'requirements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'symbol' => false,
        'name' => false,
        'description' => false,
        'strength' => false,
        'deposits' => false,
        'requirements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'symbol' => 'symbol',
        'name' => 'name',
        'description' => 'description',
        'strength' => 'strength',
        'deposits' => 'deposits',
        'requirements' => 'requirements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'symbol' => 'setSymbol',
        'name' => 'setName',
        'description' => 'setDescription',
        'strength' => 'setStrength',
        'deposits' => 'setDeposits',
        'requirements' => 'setRequirements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'symbol' => 'getSymbol',
        'name' => 'getName',
        'description' => 'getDescription',
        'strength' => 'getStrength',
        'deposits' => 'getDeposits',
        'requirements' => 'getRequirements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const SYMBOL_GAS_SIPHON_I = 'MOUNT_GAS_SIPHON_I';
    public const SYMBOL_GAS_SIPHON_II = 'MOUNT_GAS_SIPHON_II';
    public const SYMBOL_GAS_SIPHON_III = 'MOUNT_GAS_SIPHON_III';
    public const SYMBOL_SURVEYOR_I = 'MOUNT_SURVEYOR_I';
    public const SYMBOL_SURVEYOR_II = 'MOUNT_SURVEYOR_II';
    public const SYMBOL_SURVEYOR_III = 'MOUNT_SURVEYOR_III';
    public const SYMBOL_SENSOR_ARRAY_I = 'MOUNT_SENSOR_ARRAY_I';
    public const SYMBOL_SENSOR_ARRAY_II = 'MOUNT_SENSOR_ARRAY_II';
    public const SYMBOL_SENSOR_ARRAY_III = 'MOUNT_SENSOR_ARRAY_III';
    public const SYMBOL_MINING_LASER_I = 'MOUNT_MINING_LASER_I';
    public const SYMBOL_MINING_LASER_II = 'MOUNT_MINING_LASER_II';
    public const SYMBOL_MINING_LASER_III = 'MOUNT_MINING_LASER_III';
    public const SYMBOL_LASER_CANNON_I = 'MOUNT_LASER_CANNON_I';
    public const SYMBOL_MISSILE_LAUNCHER_I = 'MOUNT_MISSILE_LAUNCHER_I';
    public const SYMBOL_TURRET_I = 'MOUNT_TURRET_I';
    public const DEPOSITS_QUARTZ_SAND = 'QUARTZ_SAND';
    public const DEPOSITS_SILICON_CRYSTALS = 'SILICON_CRYSTALS';
    public const DEPOSITS_PRECIOUS_STONES = 'PRECIOUS_STONES';
    public const DEPOSITS_ICE_WATER = 'ICE_WATER';
    public const DEPOSITS_AMMONIA_ICE = 'AMMONIA_ICE';
    public const DEPOSITS_IRON_ORE = 'IRON_ORE';
    public const DEPOSITS_COPPER_ORE = 'COPPER_ORE';
    public const DEPOSITS_SILVER_ORE = 'SILVER_ORE';
    public const DEPOSITS_ALUMINUM_ORE = 'ALUMINUM_ORE';
    public const DEPOSITS_GOLD_ORE = 'GOLD_ORE';
    public const DEPOSITS_PLATINUM_ORE = 'PLATINUM_ORE';
    public const DEPOSITS_DIAMONDS = 'DIAMONDS';
    public const DEPOSITS_URANITE_ORE = 'URANITE_ORE';
    public const DEPOSITS_MERITIUM_ORE = 'MERITIUM_ORE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSymbolAllowableValues()
    {
        return [
            self::SYMBOL_GAS_SIPHON_I,
            self::SYMBOL_GAS_SIPHON_II,
            self::SYMBOL_GAS_SIPHON_III,
            self::SYMBOL_SURVEYOR_I,
            self::SYMBOL_SURVEYOR_II,
            self::SYMBOL_SURVEYOR_III,
            self::SYMBOL_SENSOR_ARRAY_I,
            self::SYMBOL_SENSOR_ARRAY_II,
            self::SYMBOL_SENSOR_ARRAY_III,
            self::SYMBOL_MINING_LASER_I,
            self::SYMBOL_MINING_LASER_II,
            self::SYMBOL_MINING_LASER_III,
            self::SYMBOL_LASER_CANNON_I,
            self::SYMBOL_MISSILE_LAUNCHER_I,
            self::SYMBOL_TURRET_I,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDepositsAllowableValues()
    {
        return [
            self::DEPOSITS_QUARTZ_SAND,
            self::DEPOSITS_SILICON_CRYSTALS,
            self::DEPOSITS_PRECIOUS_STONES,
            self::DEPOSITS_ICE_WATER,
            self::DEPOSITS_AMMONIA_ICE,
            self::DEPOSITS_IRON_ORE,
            self::DEPOSITS_COPPER_ORE,
            self::DEPOSITS_SILVER_ORE,
            self::DEPOSITS_ALUMINUM_ORE,
            self::DEPOSITS_GOLD_ORE,
            self::DEPOSITS_PLATINUM_ORE,
            self::DEPOSITS_DIAMONDS,
            self::DEPOSITS_URANITE_ORE,
            self::DEPOSITS_MERITIUM_ORE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('strength', $data ?? [], null);
        $this->setIfExists('deposits', $data ?? [], null);
        $this->setIfExists('requirements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        $allowedValues = $this->getSymbolAllowableValues();
        if (!is_null($this->container['symbol']) && !in_array($this->container['symbol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'symbol', must be one of '%s'",
                $this->container['symbol'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['strength']) && ($this->container['strength'] < 0)) {
            $invalidProperties[] = "invalid value for 'strength', must be bigger than or equal to 0.";
        }

        if ($this->container['requirements'] === null) {
            $invalidProperties[] = "'requirements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol(): string
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Symbo of this mount.
     *
     * @return $this
     */
    public function setSymbol(string $symbol): static
    {
        if (is_null($symbol)) {
            throw new InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $allowedValues = $this->getSymbolAllowableValues();
        if (!in_array($symbol, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'symbol', must be one of '%s'",
                    $symbol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this mount.
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of this mount.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets strength
     *
     * @return int|null
     */
    public function getStrength(): ?int
    {
        return $this->container['strength'];
    }

    /**
     * Sets strength
     *
     * @param int|null $strength Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.
     *
     * @return $this
     */
    public function setStrength(?int $strength): static
    {
        if (is_null($strength)) {
            throw new InvalidArgumentException('non-nullable strength cannot be null');
        }

        if (($strength < 0)) {
            throw new InvalidArgumentException('invalid value for $strength when calling ShipMount., must be bigger than or equal to 0.');
        }

        $this->container['strength'] = $strength;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return string[]|null
     */
    public function getDeposits(): ?array
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param string[]|null $deposits Mounts that have this value denote what goods can be produced from using the mount.
     *
     * @return $this
     */
    public function setDeposits(?array $deposits): static
    {
        if (is_null($deposits)) {
            throw new InvalidArgumentException('non-nullable deposits cannot be null');
        }
        $allowedValues = $this->getDepositsAllowableValues();
        if (array_diff($deposits, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deposits', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \OpenAPI\Client\Model\ShipRequirements
     */
    public function getRequirements(): \OpenAPI\Client\Model\ShipRequirements
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \OpenAPI\Client\Model\ShipRequirements $requirements requirements
     *
     * @return $this
     */
    public function setRequirements(\OpenAPI\Client\Model\ShipRequirements $requirements): static
    {
        if (is_null($requirements)) {
            throw new InvalidArgumentException('non-nullable requirements cannot be null');
        }
        $this->container['requirements'] = $requirements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


