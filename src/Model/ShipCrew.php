<?php
/**
 * ShipCrew
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ShipCrew Class Doc Comment
 *
 * @description The ship&#39;s crew service and maintain the ship&#39;s systems and equipment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ShipCrew implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipCrew';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'current' => 'int',
        'required' => 'int',
        'capacity' => 'int',
        'rotation' => 'string',
        'morale' => 'int',
        'wages' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'current' => null,
        'required' => null,
        'capacity' => null,
        'rotation' => null,
        'morale' => null,
        'wages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'current' => false,
        'required' => false,
        'capacity' => false,
        'rotation' => false,
        'morale' => false,
        'wages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'current' => 'current',
        'required' => 'required',
        'capacity' => 'capacity',
        'rotation' => 'rotation',
        'morale' => 'morale',
        'wages' => 'wages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'current' => 'setCurrent',
        'required' => 'setRequired',
        'capacity' => 'setCapacity',
        'rotation' => 'setRotation',
        'morale' => 'setMorale',
        'wages' => 'setWages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'current' => 'getCurrent',
        'required' => 'getRequired',
        'capacity' => 'getCapacity',
        'rotation' => 'getRotation',
        'morale' => 'getMorale',
        'wages' => 'getWages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ROTATION_STRICT = 'STRICT';
    public const ROTATION_RELAXED = 'RELAXED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRotationAllowableValues()
    {
        return [
            self::ROTATION_STRICT,
            self::ROTATION_RELAXED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('current', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('capacity', $data ?? [], null);
        $this->setIfExists('rotation', $data ?? [], 'STRICT');
        $this->setIfExists('morale', $data ?? [], null);
        $this->setIfExists('wages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['current'] === null) {
            $invalidProperties[] = "'current' can't be null";
        }
        if ($this->container['required'] === null) {
            $invalidProperties[] = "'required' can't be null";
        }
        if ($this->container['capacity'] === null) {
            $invalidProperties[] = "'capacity' can't be null";
        }
        if ($this->container['rotation'] === null) {
            $invalidProperties[] = "'rotation' can't be null";
        }
        $allowedValues = $this->getRotationAllowableValues();
        if (!is_null($this->container['rotation']) && !in_array($this->container['rotation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rotation', must be one of '%s'",
                $this->container['rotation'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['morale'] === null) {
            $invalidProperties[] = "'morale' can't be null";
        }
        if (($this->container['morale'] > 100)) {
            $invalidProperties[] = "invalid value for 'morale', must be smaller than or equal to 100.";
        }

        if (($this->container['morale'] < 0)) {
            $invalidProperties[] = "invalid value for 'morale', must be bigger than or equal to 0.";
        }

        if ($this->container['wages'] === null) {
            $invalidProperties[] = "'wages' can't be null";
        }
        if (($this->container['wages'] < 0)) {
            $invalidProperties[] = "invalid value for 'wages', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current
     *
     * @return int
     */
    public function getCurrent(): int
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param int $current The current number of crew members on the ship.
     *
     * @return $this
     */
    public function setCurrent(int $current): static
    {
        if (is_null($current)) {
            throw new InvalidArgumentException('non-nullable current cannot be null');
        }
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets required
     *
     * @return int
     */
    public function getRequired(): int
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param int $required The minimum number of crew members required to maintain the ship.
     *
     * @return $this
     */
    public function setRequired(int $required): static
    {
        if (is_null($required)) {
            throw new InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int
     */
    public function getCapacity(): int
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int $capacity The maximum number of crew members the ship can support.
     *
     * @return $this
     */
    public function setCapacity(int $capacity): static
    {
        if (is_null($capacity)) {
            throw new InvalidArgumentException('non-nullable capacity cannot be null');
        }
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets rotation
     *
     * @return string
     */
    public function getRotation(): string
    {
        return $this->container['rotation'];
    }

    /**
     * Sets rotation
     *
     * @param string $rotation The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
     *
     * @return $this
     */
    public function setRotation(string $rotation): static
    {
        if (is_null($rotation)) {
            throw new InvalidArgumentException('non-nullable rotation cannot be null');
        }
        $allowedValues = $this->getRotationAllowableValues();
        if (!in_array($rotation, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rotation', must be one of '%s'",
                    $rotation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rotation'] = $rotation;

        return $this;
    }

    /**
     * Gets morale
     *
     * @return int
     */
    public function getMorale(): int
    {
        return $this->container['morale'];
    }

    /**
     * Sets morale
     *
     * @param int $morale A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
     *
     * @return $this
     */
    public function setMorale(int $morale): static
    {
        if (is_null($morale)) {
            throw new InvalidArgumentException('non-nullable morale cannot be null');
        }

        if (($morale > 100)) {
            throw new InvalidArgumentException('invalid value for $morale when calling ShipCrew., must be smaller than or equal to 100.');
        }
        if (($morale < 0)) {
            throw new InvalidArgumentException('invalid value for $morale when calling ShipCrew., must be bigger than or equal to 0.');
        }

        $this->container['morale'] = $morale;

        return $this;
    }

    /**
     * Gets wages
     *
     * @return int
     */
    public function getWages(): int
    {
        return $this->container['wages'];
    }

    /**
     * Sets wages
     *
     * @param int $wages The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
     *
     * @return $this
     */
    public function setWages(int $wages): static
    {
        if (is_null($wages)) {
            throw new InvalidArgumentException('non-nullable wages cannot be null');
        }

        if (($wages < 0)) {
            throw new InvalidArgumentException('invalid value for $wages when calling ShipCrew., must be bigger than or equal to 0.');
        }

        $this->container['wages'] = $wages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


