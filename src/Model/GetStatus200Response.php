<?php
/**
 * GetStatus200Response
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetStatus200Response Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetStatus200Response implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_status_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'status' => 'string',
        'version' => 'string',
        'resetDate' => 'string',
        'description' => 'string',
        'stats' => '\OpenAPI\Client\Model\GetStatus200ResponseStats',
        'leaderboards' => '\OpenAPI\Client\Model\GetStatus200ResponseLeaderboards',
        'serverResets' => '\OpenAPI\Client\Model\GetStatus200ResponseServerResets',
        'announcements' => '\OpenAPI\Client\Model\GetStatus200ResponseAnnouncementsInner[]',
        'links' => '\OpenAPI\Client\Model\GetStatus200ResponseLinksInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'status' => null,
        'version' => null,
        'resetDate' => null,
        'description' => null,
        'stats' => null,
        'leaderboards' => null,
        'serverResets' => null,
        'announcements' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'status' => false,
        'version' => false,
        'resetDate' => false,
        'description' => false,
        'stats' => false,
        'leaderboards' => false,
        'serverResets' => false,
        'announcements' => false,
        'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'status' => 'status',
        'version' => 'version',
        'resetDate' => 'resetDate',
        'description' => 'description',
        'stats' => 'stats',
        'leaderboards' => 'leaderboards',
        'serverResets' => 'serverResets',
        'announcements' => 'announcements',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'status' => 'setStatus',
        'version' => 'setVersion',
        'resetDate' => 'setResetDate',
        'description' => 'setDescription',
        'stats' => 'setStats',
        'leaderboards' => 'setLeaderboards',
        'serverResets' => 'setServerResets',
        'announcements' => 'setAnnouncements',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'status' => 'getStatus',
        'version' => 'getVersion',
        'resetDate' => 'getResetDate',
        'description' => 'getDescription',
        'stats' => 'getStats',
        'leaderboards' => 'getLeaderboards',
        'serverResets' => 'getServerResets',
        'announcements' => 'getAnnouncements',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('resetDate', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('leaderboards', $data ?? [], null);
        $this->setIfExists('serverResets', $data ?? [], null);
        $this->setIfExists('announcements', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['resetDate'] === null) {
            $invalidProperties[] = "'resetDate' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['leaderboards'] === null) {
            $invalidProperties[] = "'leaderboards' can't be null";
        }
        if ($this->container['serverResets'] === null) {
            $invalidProperties[] = "'serverResets' can't be null";
        }
        if ($this->container['announcements'] === null) {
            $invalidProperties[] = "'announcements' can't be null";
        }
        if ($this->container['links'] === null) {
            $invalidProperties[] = "'links' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the game server.
     *
     * @return $this
     */
    public function setStatus(string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion(): string
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The current version of the API.
     *
     * @return $this
     */
    public function setVersion(string $version): static
    {
        if (is_null($version)) {
            throw new InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets resetDate
     *
     * @return string
     */
    public function getResetDate(): string
    {
        return $this->container['resetDate'];
    }

    /**
     * Sets resetDate
     *
     * @param string $resetDate The date when the game server was last reset.
     *
     * @return $this
     */
    public function setResetDate(string $resetDate): static
    {
        if (is_null($resetDate)) {
            throw new InvalidArgumentException('non-nullable resetDate cannot be null');
        }
        $this->container['resetDate'] = $resetDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription(string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \OpenAPI\Client\Model\GetStatus200ResponseStats
     */
    public function getStats(): \OpenAPI\Client\Model\GetStatus200ResponseStats
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \OpenAPI\Client\Model\GetStatus200ResponseStats $stats stats
     *
     * @return $this
     */
    public function setStats(\OpenAPI\Client\Model\GetStatus200ResponseStats $stats): static
    {
        if (is_null($stats)) {
            throw new InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets leaderboards
     *
     * @return \OpenAPI\Client\Model\GetStatus200ResponseLeaderboards
     */
    public function getLeaderboards(): \OpenAPI\Client\Model\GetStatus200ResponseLeaderboards
    {
        return $this->container['leaderboards'];
    }

    /**
     * Sets leaderboards
     *
     * @param \OpenAPI\Client\Model\GetStatus200ResponseLeaderboards $leaderboards leaderboards
     *
     * @return $this
     */
    public function setLeaderboards(\OpenAPI\Client\Model\GetStatus200ResponseLeaderboards $leaderboards): static
    {
        if (is_null($leaderboards)) {
            throw new InvalidArgumentException('non-nullable leaderboards cannot be null');
        }
        $this->container['leaderboards'] = $leaderboards;

        return $this;
    }

    /**
     * Gets serverResets
     *
     * @return \OpenAPI\Client\Model\GetStatus200ResponseServerResets
     */
    public function getServerResets(): \OpenAPI\Client\Model\GetStatus200ResponseServerResets
    {
        return $this->container['serverResets'];
    }

    /**
     * Sets serverResets
     *
     * @param \OpenAPI\Client\Model\GetStatus200ResponseServerResets $serverResets serverResets
     *
     * @return $this
     */
    public function setServerResets(\OpenAPI\Client\Model\GetStatus200ResponseServerResets $serverResets): static
    {
        if (is_null($serverResets)) {
            throw new InvalidArgumentException('non-nullable serverResets cannot be null');
        }
        $this->container['serverResets'] = $serverResets;

        return $this;
    }

    /**
     * Gets announcements
     *
     * @return \OpenAPI\Client\Model\GetStatus200ResponseAnnouncementsInner[]
     */
    public function getAnnouncements(): array
    {
        return $this->container['announcements'];
    }

    /**
     * Sets announcements
     *
     * @param \OpenAPI\Client\Model\GetStatus200ResponseAnnouncementsInner[] $announcements announcements
     *
     * @return $this
     */
    public function setAnnouncements(array $announcements): static
    {
        if (is_null($announcements)) {
            throw new InvalidArgumentException('non-nullable announcements cannot be null');
        }
        $this->container['announcements'] = $announcements;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\GetStatus200ResponseLinksInner[]
     */
    public function getLinks(): array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\GetStatus200ResponseLinksInner[] $links links
     *
     * @return $this
     */
    public function setLinks(array $links): static
    {
        if (is_null($links)) {
            throw new InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


