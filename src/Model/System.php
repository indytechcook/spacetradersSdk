<?php
/**
 * System
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * System Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class System implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'System';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'symbol' => 'string',
        'sectorSymbol' => 'string',
        'type' => '\OpenAPI\Client\Model\SystemType',
        'x' => 'int',
        'y' => 'int',
        'waypoints' => '\OpenAPI\Client\Model\SystemWaypoint[]',
        'factions' => '\OpenAPI\Client\Model\SystemFaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'symbol' => null,
        'sectorSymbol' => null,
        'type' => null,
        'x' => null,
        'y' => null,
        'waypoints' => null,
        'factions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'symbol' => false,
        'sectorSymbol' => false,
        'type' => false,
        'x' => false,
        'y' => false,
        'waypoints' => false,
        'factions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'symbol' => 'symbol',
        'sectorSymbol' => 'sectorSymbol',
        'type' => 'type',
        'x' => 'x',
        'y' => 'y',
        'waypoints' => 'waypoints',
        'factions' => 'factions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'symbol' => 'setSymbol',
        'sectorSymbol' => 'setSectorSymbol',
        'type' => 'setType',
        'x' => 'setX',
        'y' => 'setY',
        'waypoints' => 'setWaypoints',
        'factions' => 'setFactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'symbol' => 'getSymbol',
        'sectorSymbol' => 'getSectorSymbol',
        'type' => 'getType',
        'x' => 'getX',
        'y' => 'getY',
        'waypoints' => 'getWaypoints',
        'factions' => 'getFactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('sectorSymbol', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('x', $data ?? [], null);
        $this->setIfExists('y', $data ?? [], null);
        $this->setIfExists('waypoints', $data ?? [], null);
        $this->setIfExists('factions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sectorSymbol'] === null) {
            $invalidProperties[] = "'sectorSymbol' can't be null";
        }
        if ((mb_strlen($this->container['sectorSymbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'sectorSymbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['x'] === null) {
            $invalidProperties[] = "'x' can't be null";
        }
        if ($this->container['y'] === null) {
            $invalidProperties[] = "'y' can't be null";
        }
        if ($this->container['waypoints'] === null) {
            $invalidProperties[] = "'waypoints' can't be null";
        }
        if ($this->container['factions'] === null) {
            $invalidProperties[] = "'factions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol(): string
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol The symbol of the system.
     *
     * @return $this
     */
    public function setSymbol(string $symbol): static
    {
        if (is_null($symbol)) {
            throw new InvalidArgumentException('non-nullable symbol cannot be null');
        }

        if ((mb_strlen($symbol) < 1)) {
            throw new InvalidArgumentException('invalid length for $symbol when calling System., must be bigger than or equal to 1.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets sectorSymbol
     *
     * @return string
     */
    public function getSectorSymbol(): string
    {
        return $this->container['sectorSymbol'];
    }

    /**
     * Sets sectorSymbol
     *
     * @param string $sectorSymbol The symbol of the sector.
     *
     * @return $this
     */
    public function setSectorSymbol(string $sectorSymbol): static
    {
        if (is_null($sectorSymbol)) {
            throw new InvalidArgumentException('non-nullable sectorSymbol cannot be null');
        }

        if ((mb_strlen($sectorSymbol) < 1)) {
            throw new InvalidArgumentException('invalid length for $sectorSymbol when calling System., must be bigger than or equal to 1.');
        }

        $this->container['sectorSymbol'] = $sectorSymbol;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\SystemType
     */
    public function getType(): \OpenAPI\Client\Model\SystemType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\SystemType $type type
     *
     * @return $this
     */
    public function setType(\OpenAPI\Client\Model\SystemType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets x
     *
     * @return int
     */
    public function getX(): int
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param int $x Relative position of the system in the sector in the x axis.
     *
     * @return $this
     */
    public function setX(int $x): static
    {
        if (is_null($x)) {
            throw new InvalidArgumentException('non-nullable x cannot be null');
        }
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return int
     */
    public function getY(): int
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param int $y Relative position of the system in the sector in the y axis.
     *
     * @return $this
     */
    public function setY(int $y): static
    {
        if (is_null($y)) {
            throw new InvalidArgumentException('non-nullable y cannot be null');
        }
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets waypoints
     *
     * @return \OpenAPI\Client\Model\SystemWaypoint[]
     */
    public function getWaypoints(): array
    {
        return $this->container['waypoints'];
    }

    /**
     * Sets waypoints
     *
     * @param \OpenAPI\Client\Model\SystemWaypoint[] $waypoints Waypoints in this system.
     *
     * @return $this
     */
    public function setWaypoints(array $waypoints): static
    {
        if (is_null($waypoints)) {
            throw new InvalidArgumentException('non-nullable waypoints cannot be null');
        }
        $this->container['waypoints'] = $waypoints;

        return $this;
    }

    /**
     * Gets factions
     *
     * @return \OpenAPI\Client\Model\SystemFaction[]
     */
    public function getFactions(): array
    {
        return $this->container['factions'];
    }

    /**
     * Sets factions
     *
     * @param \OpenAPI\Client\Model\SystemFaction[] $factions Factions that control this system.
     *
     * @return $this
     */
    public function setFactions(array $factions): static
    {
        if (is_null($factions)) {
            throw new InvalidArgumentException('non-nullable factions cannot be null');
        }
        $this->container['factions'] = $factions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


