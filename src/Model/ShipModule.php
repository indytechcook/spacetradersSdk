<?php
/**
 * ShipModule
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ShipModule Class Doc Comment
 *
 * @description A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ShipModule implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipModule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'symbol' => 'string',
        'capacity' => 'int',
        'range' => 'int',
        'name' => 'string',
        'description' => 'string',
        'requirements' => '\OpenAPI\Client\Model\ShipRequirements'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'symbol' => null,
        'capacity' => null,
        'range' => null,
        'name' => null,
        'description' => null,
        'requirements' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'symbol' => false,
        'capacity' => false,
        'range' => false,
        'name' => false,
        'description' => false,
        'requirements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'symbol' => 'symbol',
        'capacity' => 'capacity',
        'range' => 'range',
        'name' => 'name',
        'description' => 'description',
        'requirements' => 'requirements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'symbol' => 'setSymbol',
        'capacity' => 'setCapacity',
        'range' => 'setRange',
        'name' => 'setName',
        'description' => 'setDescription',
        'requirements' => 'setRequirements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'symbol' => 'getSymbol',
        'capacity' => 'getCapacity',
        'range' => 'getRange',
        'name' => 'getName',
        'description' => 'getDescription',
        'requirements' => 'getRequirements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const SYMBOL_MINERAL_PROCESSOR_I = 'MODULE_MINERAL_PROCESSOR_I';
    public const SYMBOL_GAS_PROCESSOR_I = 'MODULE_GAS_PROCESSOR_I';
    public const SYMBOL_CARGO_HOLD_I = 'MODULE_CARGO_HOLD_I';
    public const SYMBOL_CARGO_HOLD_II = 'MODULE_CARGO_HOLD_II';
    public const SYMBOL_CARGO_HOLD_III = 'MODULE_CARGO_HOLD_III';
    public const SYMBOL_CREW_QUARTERS_I = 'MODULE_CREW_QUARTERS_I';
    public const SYMBOL_ENVOY_QUARTERS_I = 'MODULE_ENVOY_QUARTERS_I';
    public const SYMBOL_PASSENGER_CABIN_I = 'MODULE_PASSENGER_CABIN_I';
    public const SYMBOL_MICRO_REFINERY_I = 'MODULE_MICRO_REFINERY_I';
    public const SYMBOL_ORE_REFINERY_I = 'MODULE_ORE_REFINERY_I';
    public const SYMBOL_FUEL_REFINERY_I = 'MODULE_FUEL_REFINERY_I';
    public const SYMBOL_SCIENCE_LAB_I = 'MODULE_SCIENCE_LAB_I';
    public const SYMBOL_JUMP_DRIVE_I = 'MODULE_JUMP_DRIVE_I';
    public const SYMBOL_JUMP_DRIVE_II = 'MODULE_JUMP_DRIVE_II';
    public const SYMBOL_JUMP_DRIVE_III = 'MODULE_JUMP_DRIVE_III';
    public const SYMBOL_WARP_DRIVE_I = 'MODULE_WARP_DRIVE_I';
    public const SYMBOL_WARP_DRIVE_II = 'MODULE_WARP_DRIVE_II';
    public const SYMBOL_WARP_DRIVE_III = 'MODULE_WARP_DRIVE_III';
    public const SYMBOL_SHIELD_GENERATOR_I = 'MODULE_SHIELD_GENERATOR_I';
    public const SYMBOL_SHIELD_GENERATOR_II = 'MODULE_SHIELD_GENERATOR_II';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSymbolAllowableValues()
    {
        return [
            self::SYMBOL_MINERAL_PROCESSOR_I,
            self::SYMBOL_GAS_PROCESSOR_I,
            self::SYMBOL_CARGO_HOLD_I,
            self::SYMBOL_CARGO_HOLD_II,
            self::SYMBOL_CARGO_HOLD_III,
            self::SYMBOL_CREW_QUARTERS_I,
            self::SYMBOL_ENVOY_QUARTERS_I,
            self::SYMBOL_PASSENGER_CABIN_I,
            self::SYMBOL_MICRO_REFINERY_I,
            self::SYMBOL_ORE_REFINERY_I,
            self::SYMBOL_FUEL_REFINERY_I,
            self::SYMBOL_SCIENCE_LAB_I,
            self::SYMBOL_JUMP_DRIVE_I,
            self::SYMBOL_JUMP_DRIVE_II,
            self::SYMBOL_JUMP_DRIVE_III,
            self::SYMBOL_WARP_DRIVE_I,
            self::SYMBOL_WARP_DRIVE_II,
            self::SYMBOL_WARP_DRIVE_III,
            self::SYMBOL_SHIELD_GENERATOR_I,
            self::SYMBOL_SHIELD_GENERATOR_II,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('capacity', $data ?? [], null);
        $this->setIfExists('range', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('requirements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        $allowedValues = $this->getSymbolAllowableValues();
        if (!is_null($this->container['symbol']) && !in_array($this->container['symbol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'symbol', must be one of '%s'",
                $this->container['symbol'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['capacity']) && ($this->container['capacity'] < 0)) {
            $invalidProperties[] = "invalid value for 'capacity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['range']) && ($this->container['range'] < 0)) {
            $invalidProperties[] = "invalid value for 'range', must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['requirements'] === null) {
            $invalidProperties[] = "'requirements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol(): string
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol The symbol of the module.
     *
     * @return $this
     */
    public function setSymbol(string $symbol): static
    {
        if (is_null($symbol)) {
            throw new InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $allowedValues = $this->getSymbolAllowableValues();
        if (!in_array($symbol, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'symbol', must be one of '%s'",
                    $symbol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return int|null
     */
    public function getCapacity(): ?int
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param int|null $capacity Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.
     *
     * @return $this
     */
    public function setCapacity(?int $capacity): static
    {
        if (is_null($capacity)) {
            throw new InvalidArgumentException('non-nullable capacity cannot be null');
        }

        if (($capacity < 0)) {
            throw new InvalidArgumentException('invalid value for $capacity when calling ShipModule., must be bigger than or equal to 0.');
        }

        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets range
     *
     * @return int|null
     */
    public function getRange(): ?int
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param int|null $range Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.
     *
     * @return $this
     */
    public function setRange(?int $range): static
    {
        if (is_null($range)) {
            throw new InvalidArgumentException('non-nullable range cannot be null');
        }

        if (($range < 0)) {
            throw new InvalidArgumentException('invalid value for $range when calling ShipModule., must be bigger than or equal to 0.');
        }

        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this module.
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of this module.
     *
     * @return $this
     */
    public function setDescription(string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \OpenAPI\Client\Model\ShipRequirements
     */
    public function getRequirements(): \OpenAPI\Client\Model\ShipRequirements
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \OpenAPI\Client\Model\ShipRequirements $requirements requirements
     *
     * @return $this
     */
    public function setRequirements(\OpenAPI\Client\Model\ShipRequirements $requirements): static
    {
        if (is_null($requirements)) {
            throw new InvalidArgumentException('non-nullable requirements cannot be null');
        }
        $this->container['requirements'] = $requirements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


