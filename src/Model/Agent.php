<?php
/**
 * Agent
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Agent Class Doc Comment
 *
 * @description Agent details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Agent implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Agent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'accountId' => 'string',
        'symbol' => 'string',
        'headquarters' => 'string',
        'credits' => 'int',
        'startingFaction' => 'string',
        'shipCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'accountId' => null,
        'symbol' => null,
        'headquarters' => null,
        'credits' => 'int64',
        'startingFaction' => null,
        'shipCount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'accountId' => false,
        'symbol' => false,
        'headquarters' => false,
        'credits' => false,
        'startingFaction' => false,
        'shipCount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'accountId' => 'accountId',
        'symbol' => 'symbol',
        'headquarters' => 'headquarters',
        'credits' => 'credits',
        'startingFaction' => 'startingFaction',
        'shipCount' => 'shipCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'accountId' => 'setAccountId',
        'symbol' => 'setSymbol',
        'headquarters' => 'setHeadquarters',
        'credits' => 'setCredits',
        'startingFaction' => 'setStartingFaction',
        'shipCount' => 'setShipCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'accountId' => 'getAccountId',
        'symbol' => 'getSymbol',
        'headquarters' => 'getHeadquarters',
        'credits' => 'getCredits',
        'startingFaction' => 'getStartingFaction',
        'shipCount' => 'getShipCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('headquarters', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('startingFaction', $data ?? [], null);
        $this->setIfExists('shipCount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountId']) && (mb_strlen($this->container['accountId']) < 1)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ((mb_strlen($this->container['symbol']) > 14)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be smaller than or equal to 14.";
        }

        if ((mb_strlen($this->container['symbol']) < 3)) {
            $invalidProperties[] = "invalid value for 'symbol', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['headquarters'] === null) {
            $invalidProperties[] = "'headquarters' can't be null";
        }
        if ((mb_strlen($this->container['headquarters']) < 1)) {
            $invalidProperties[] = "invalid value for 'headquarters', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['startingFaction'] === null) {
            $invalidProperties[] = "'startingFaction' can't be null";
        }
        if ((mb_strlen($this->container['startingFaction']) < 1)) {
            $invalidProperties[] = "invalid value for 'startingFaction', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shipCount'] === null) {
            $invalidProperties[] = "'shipCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId(): ?string
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId Account ID that is tied to this agent. Only included on your own agent.
     *
     * @return $this
     */
    public function setAccountId(?string $accountId): static
    {
        if (is_null($accountId)) {
            throw new InvalidArgumentException('non-nullable accountId cannot be null');
        }

        if ((mb_strlen($accountId) < 1)) {
            throw new InvalidArgumentException('invalid length for $accountId when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol(): string
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Symbol of the agent.
     *
     * @return $this
     */
    public function setSymbol(string $symbol): static
    {
        if (is_null($symbol)) {
            throw new InvalidArgumentException('non-nullable symbol cannot be null');
        }
        if ((mb_strlen($symbol) > 14)) {
            throw new InvalidArgumentException('invalid length for $symbol when calling Agent., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($symbol) < 3)) {
            throw new InvalidArgumentException('invalid length for $symbol when calling Agent., must be bigger than or equal to 3.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets headquarters
     *
     * @return string
     */
    public function getHeadquarters(): string
    {
        return $this->container['headquarters'];
    }

    /**
     * Sets headquarters
     *
     * @param string $headquarters The headquarters of the agent.
     *
     * @return $this
     */
    public function setHeadquarters(string $headquarters): static
    {
        if (is_null($headquarters)) {
            throw new InvalidArgumentException('non-nullable headquarters cannot be null');
        }

        if ((mb_strlen($headquarters) < 1)) {
            throw new InvalidArgumentException('invalid length for $headquarters when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['headquarters'] = $headquarters;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return int
     */
    public function getCredits(): int
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param int $credits The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
     *
     * @return $this
     */
    public function setCredits(int $credits): static
    {
        if (is_null($credits)) {
            throw new InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets startingFaction
     *
     * @return string
     */
    public function getStartingFaction(): string
    {
        return $this->container['startingFaction'];
    }

    /**
     * Sets startingFaction
     *
     * @param string $startingFaction The faction the agent started with.
     *
     * @return $this
     */
    public function setStartingFaction(string $startingFaction): static
    {
        if (is_null($startingFaction)) {
            throw new InvalidArgumentException('non-nullable startingFaction cannot be null');
        }

        if ((mb_strlen($startingFaction) < 1)) {
            throw new InvalidArgumentException('invalid length for $startingFaction when calling Agent., must be bigger than or equal to 1.');
        }

        $this->container['startingFaction'] = $startingFaction;

        return $this;
    }

    /**
     * Gets shipCount
     *
     * @return int
     */
    public function getShipCount(): int
    {
        return $this->container['shipCount'];
    }

    /**
     * Sets shipCount
     *
     * @param int $shipCount How many ships are owned by the agent.
     *
     * @return $this
     */
    public function setShipCount(int $shipCount): static
    {
        if (is_null($shipCount)) {
            throw new InvalidArgumentException('non-nullable shipCount cannot be null');
        }
        $this->container['shipCount'] = $shipCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


